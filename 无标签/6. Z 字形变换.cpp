/*
找规律，画出行数为n的、字符串s的Z字形变换。
可以发现第一行和最后一行是首项为行数 i，公差为 2 * n - 2的等差数列。
对于中间行，可以发现是两个数列组成的。
第一个数列也是首项为行数 i,公差为 2 * n - 2 的等差数列。
第二个数列的首项是 2 * n - 2 - i，公差为 2 * n - 2 的等差数列。
所以只需要枚举一下行数，然后根据每行的情况，把这一行的字符都加上就好了。
这里注意要特判一下行数为1时，直接返回原字符串s就好了。
*/

class Solution {
public:
    string convert(string s, int n) {
        if(n == 1) {                              //特判一下，行数为1时
            return s;                             //直接返回原字符串s
        }
        string res;
        for(int i = 0; i < n; ++i) {
            if(i == 0 || i == n - 1) {              //第一行和最后一行是首项为i，公差为 2 * n - 2的等差数列
                for(int j = i; j < s.size(); j += (2 * n - 2)) {      
                    res += s[j];
                }
            } else {
                //中间行有两个等差数列，第一个数列首项 j 为行数 i，公差为 2 * n - 2
                //第二个数列首项 k 为 2 * n - 2 - i，公差为 2 * n - 2
                for(int j = i, k = 2 * n - 2 - i; j < s.size() || k < s.size(); j += (2 * n - 2), k += (2 * n - 2)) {
                    if(j < s.size()) {
                        res += s[j];
                    }
                    if(k < s.size()) {
                        res += s[k];
                    }
                }
            }
        }
        return res;
    }
};
